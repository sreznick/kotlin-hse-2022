/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package homework04

import java.io.File
import java.io.FileNotFoundException


class HtmlParser : StringParsers, DefaultParsers() {
    private fun parseChar(stack: ArrayDeque<String>): StringParser<String> = flatMap(readChar()) { c ->
        when (c) {
            '<' -> flatMap(transform(parseTags()) { "<$it" }) transform@{ tag ->
                if (stack.isEmpty()) {
                    return@transform fail("Incorrect input: characters after </back>")
                }
                val res = StringBuilder()
                when (tag) {
                    "<p>", "<div>" -> {
                        if (stack.last() == "<p>") {
                            res.append("</p>")
                            stack.removeLast()
                        }
                        stack.addLast(tag)
                    }

                    "</p>" -> {
                        if (stack.last() == "<p>") {
                            stack.removeLast()
                        } else return@transform constant(res.toString())
                    }

                    "</div>" -> {
                        if (stack.last() == "<p>") {
                            res.append("</p>")
                            stack.removeLast()
                        }
                        if (stack.last() != "<div>") return@transform fail("Incorrect input: unexpected </div>")
                        stack.removeLast()
                    }

                    "<body>" -> return@transform constant(res.toString())

                    "</body>" -> {
                        if (stack.last() == "<p>") {
                            stack.removeLast()
                            res.append("</p>")
                        }
                        while (stack.removeLast() == "<div>") {
                            res.append("</div>")
                        }
                    }
                }
                res.append(tag)
                constant(res.toString())
            }
            else -> if (stack.isEmpty() && !c.isWhitespace()) {
                fail("Incorrect input: character $c after end of input")
            } else {
                DefaultParsers().constant(
                    if (c.isWhitespace() || stack.last() == "<p>") "$c" else {
                        stack.addLast("<p>")
                        "<p>$c"
                    }
                )
            }

        }
    }


    private fun parseTags() = or(
        parseSingleTag("p"),
        parseSingleTag("div"), parseSingleTag("/p"), parseSingleTag("/div"),
        parseSingleTag("/body"), parseSingleTag("body")
    )

    private fun parseSingleTag(tag: String) = or(
        expectString("$tag>"),
        combineStrings(expectString(tag), constant(">"))
    )


    private fun String.toClosedTag(): String {
        return "</${substring(1)}"
    }

    fun parseHtml(): StringParser<String> = { input: Location<String> ->
        val stack = ArrayDeque<String>()
        stack.addLast("<body>")
        transform(combineStrings(constant("<body>"), or(manyString(parseChar(stack)), constant("")), eof())) {
            val res = StringBuilder(it)
            while (!stack.isEmpty()) res.append(stack.removeLast().toClosedTag())
            res.toString()
        }(input.copy(input.input.trim()))

    }
}


fun main(args: Array<String>) {
    if (args.isEmpty()) {
        println("File to analyze was not specified")
        return
    }
    try {
        with(HtmlParser()) {
            println(run(parseHtml(), File(args.first()).readText()))
        }
    } catch (e: FileNotFoundException) {
        println(e.message)
        return
    }
}



